name: Todo App CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Phase
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: todo-cicd/package-lock.json

      - name: Install dependencies
        run: npm install
        working-directory: todo-cicd

      - name: Build application
        run: npm run build
        working-directory: todo-cicd

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: todo-cicd/dist/
          retention-days: 1

  test:
    name: Test Phase
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: todo-cicd/package-lock.json

      - name: Install dependencies
        run: npm install
        working-directory: todo-cicd

      - name: Run tests
        run: npm run test
        working-directory: todo-cicd

  deploy:
    name: Deploy Phase
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: todo-cicd/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: todo-cicd/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Prepeare Google Application Credentials
        run: |
          RAW="$RUNNER_TEMP/cred.raw"
          printf '%s' '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > "$RAW"

          # 先頭1文字が { なら生JSON、それ以外は base64 とみなして復号
          if head -c1 "$RAW" | grep -q '{'; then
            mv "$RAW" "$RUNNER_TEMP/key.json"
          else
            base64 -d "$RAW" > "$RUNNER_TEMP/key.json" || {
              echo "Secret is neither valid JSON nor base64. Recheck FIREBASE_SERVICE_ACCOUNT_JSON."; exit 1;
            }
          fi

          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/key.json" >> "$GITHUB_ENV"

      - name: Validate service account JSON & project
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          test -s "$RUNNER_TEMP/key.json" || { echo "empty key.json (secret mising)"; exit 1; }
          echo "SA project_id: $(jq -r '.project_id' "$RUNNER_TEMP/key.json")"
          echo "SA type      : $(jq -r '.type' "$RUNNER_TEMP/key.json")"



      - name: Deploy Firebase
        run: |
          firebase deploy --only hosting --project ${{ secrets.FIRABASE_PROJECT_ID }} --non-interactive

      - name: Remove private key
        if: always()
        run: rm $RUNNER_TEMP/key.json